#!/usr/bin/env python
# -*- coding: utf8 -*-

import os
import os.path as op
import subprocess as sp
import sys
import time


def execute(args, cwd=None, casual=False):
    """
    Execute a command.
    """
    p = sp.Popen(args, shell=False, stdout=sp.PIPE, stderr=sp.PIPE, cwd=cwd)
    stdo, stde = p.communicate()
    code = p.returncode
    if not casual:
        assert len(stdo) == 0 and len(stde) == 0 and code == 0, \
            (stdo, stde, code)
    return stdo, stde, code


def locate_bundles(root):
    """
    Collect ./_* files and folders.
    """
    return [name for name in os.listdir(root) if name.startswith('_')]


def locate_singles(root):
    """
    Collect individual files inside ./-* folders.
    """
    # symlinks to folders are treated as files
    output = []
    for path in os.listdir(root):
        if path.startswith('-'):
            for d, dirnames, filenames in os.walk(path):
                output += [op.join(d, filename) for filename in filenames]
                output += filter(op.islink,
                                 [op.join(d, dirname) for dirname in dirnames])
    return output


def perform_backup(root, home, backup):
    """
    Backup files and folders to be overwritten.
    """
    print('Creating backup')
    tarball = op.join(root, time.strftime('backup-%y%m%d.%H%M%S.tar.bz2'))
    stdo, stde, code = execute(['tar', 'jcvf', tarball] + backup,
                               cwd=home, casual=True)

    if len(stde) > 0 or code != 0:
        print(stdo)
        print(stde)
        print('Exit status %d' % code)

        sys.exit(code)

    print('Removing files to overwrite')
    execute(['rm', '-rf'] + backup, cwd=home)


def create_symlinks(root, home, source, target):
    """
    Create symlinks in home directory.
    """
    print('Creating symlinks')
    for raw, symlink in zip(source, target):
        print(raw, 'â‡’', symlink)
        original = op.join(root, raw)

        dname = op.dirname(symlink)
        bname = op.basename(symlink)
        if len(dname) > 0:
            execute(['mkdir', '-p', dname], cwd=home)
            execute(['ln', '-s', original, bname], cwd=op.join(home, dname))
        else:
            execute(['ln', '-s', original, symlink], cwd=home)


def main():
    root = op.dirname(op.abspath(__file__))
    home = op.expanduser('~')

    source = locate_bundles(root) + locate_singles(root)

    target = ['.' + path[1:] for path in source]
    backup = [path for path in target if op.exists(op.join(home, path))]

    if len(backup) > 0:
        perform_backup(root, home, backup)

    create_symlinks(root, home, source, target)


if __name__ == '__main__':
    main()
