#!/usr/bin/env python2
# -*- coding: utf8 -*-

def execute(args, cwd=None, casual=False):
    """execute a command"""
    from subprocess import Popen, PIPE
    p = Popen(args, shell=False, stdout=PIPE, stderr=PIPE, cwd=cwd)
    stdo, stde = p.communicate()
    code = p.returncode
    if not casual:
        assert len(stdo) == 0 and len(stde) == 0 and code == 0, (stdo, stde, code)
    return stdo, stde, code

def locate_bundles(root):
    """shallow-collect ./_* files and folders"""
    from os import listdir
    return [name for name in listdir(root) if name.startswith('_')]

def locate_singles(root):
    """collect individual files inside ./-*, treating symlinks to folders as files"""
    from os import listdir, walk
    from os.path import join, islink

    output = []
    for path in listdir(root):
        if path.startswith('-'):
            for dirpath, dirnames, filenames in walk(path):
                output += [join(dirpath, filename) for filename in filenames]
                output += filter(islink, [join(dirpath, dirname) for dirname in dirnames])
    return output

def perform_backup(root, home, backup):
    """backup files and folders to be overwritten"""
    from os.path import join
    from time import strftime

    print 'Creating backup'
    tarball = join(root, strftime('backup-%y%m%d.%H%M%S.tar.bz2'))
    stdo, stde, code = execute(['tar', 'jcvf', tarball] + backup, cwd=home, casual=True)

    if len(stde) > 0 or code != 0:
        print stdo
        print stde
        print 'Exit status %d' % code

        from sys import exit
        exit(code)

    print 'Removing files to overwrite'
    execute(['rm','-rf'] + backup, cwd=home)

def create_symlinks(root, home, source, target):
    """create symlinks to $HOME"""
    from os.path import join, dirname, basename

    print 'Creating symlinks'
    for raw, symlink in zip(source, target):
        print raw, 'â‡’', symlink
        original = join(root, raw)

        dname = dirname(symlink)
        bname = basename(symlink)
        if len(dname) > 0:
            execute(['mkdir', '-p', dname], cwd=home)
            execute(['ln', '-s', original, bname], cwd=join(home, dname))
        else:
            execute(['ln', '-s', original, symlink], cwd=home)

def main():
    from os.path import dirname, abspath, expanduser
    root = dirname(abspath(__file__))
    home = expanduser('~')

    from os.path import join, exists
    source = locate_bundles(root) + locate_singles(root)

    target = ['.' + path[1:] for path in source]
    backup = [path for path in target if exists(join(home, path))]

    if len(backup) > 0:
        perform_backup(root, home, backup)

    create_symlinks(root, home, source, target)

if __name__=='__main__':
    main()
