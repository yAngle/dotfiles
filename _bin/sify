#!/usr/bin/env python2
# -*- coding: utf8 -*-

from argh.helpers import ArghParser
from argh import arg, expects_obj

email = ''.join(map(lambda c: chr(ord(c) - 1), 'zbohmfxvAvne/fev'))
template = """#!/bin/bash
#SBATCH --mail-user=""" + email + """
#SBATCH --mail-type=FAIL
#SBATCH -o .slurm/{job}.out
#SBATCH -J {job}
#SBATCH -N 1
#SBATCH --ntasks-per-node={ppn}
#SBATCH --share
#SBATCH -t {walltime}
#SBATCH --mem {memory}

set -e

source ~/.bashrc || true
[ -e ~/.bashrc.mine ] && source ~/.bashrc.mine

[ -n "$SLURM_SUBMIT_DIR" ] && cd $SLURM_SUBMIT_DIR

{cmd}
"""

def get_current_jobs():
    """get the list of all submitted jobs"""
    from sh import whoami
    me = whoami().rstrip('\n')
    from sh import squeue
    raw = squeue('-h', '-Si', '-o', '"%7i"', '-u', me).rstrip('\n')
    return [int(line.rstrip('" ').lstrip('"')) for line in raw.split('\n')]

def generate_slurm(cmd, jobprefix, walltime, memory, ppn_default=1, serial=[0]):
    """generate SLURM script for a single job"""
    if not isinstance(cmd, str):
        cmd = '\n'.join(cmd)

    job = '%s-%d' % (jobprefix, serial[0])
    serial[0] += 1

    prefix = 'env OMP_NUM_THREADS='
    ppn = int(cmd[len(prefix): cmd.index(' ', len(prefix))]) if cmd.startswith(prefix) else ppn_default

    filename = '.slurm/{job}'.format(job=job)
    content = template.format(job=job, walltime=walltime, memory=memory * 1024, ppn=ppn, cmd=cmd)
    return filename, content

def chunks(l, n):
    """cut l into chunks of size no larger than n"""
    m = len(l) / n + 1 # number of chunks. +1 guarantees the "no larger" part
    for i in xrange(min(m, len(l))):
        yield l[i::m]

@arg('script', type=str, help='filename of the script to be processed')
@arg('-j', dest='jobprefix', type=str, help='job name prefix', default=None)
@arg('-d', dest='duplicate', type=int, help='duplicate each line multiple times', default=1)
@arg('-n', dest='number', type=int, help='put n commands in each SLURM script', default=1)
@arg('-t', dest='walltime', type=str, help='required walltime, with format: m:s, h:m:s, d-h, d-h:m, or d-h:m:s', default='8:00:00')
@arg('--memory', type=int, help='required memory in GB', default=8)
@arg('--after', type=str, metavar='# or #min-#max', help='hold execution till the specified job(s) are finished', default=None)
def process(script, jobprefix, duplicate, number, walltime, memory, after):
    """generate SLURM scripts, one for each line of the input file"""
    with open(script) as f:
        lines = [line.rstrip('\n') for line in f
                 if line[0] not in '#\n' and not line.startswith('set -e')]
    lines = lines * duplicate

    if jobprefix is None:
        from pydoc import pager
        text = ('=' * 60 + '\n').join(generate_slurm(cmd, '{jobprefix}', walltime, memory)[1] for cmd in chunks(lines, number))
        pager(text)
        return

    from sh import mkdir
    mkdir('-p', '.slurm')

    from os.path import isfile
    filenames = []
    for cmd in chunks(lines, number):
        filename, content = generate_slurm(cmd, jobprefix, walltime, memory)
        if isfile(filename):
            assert not isfile(filename + '.out') # never overwrite started jobs

        with open(filename, 'w') as f:
            f.write(content)
        filenames.append(filename)

    sbatch = 'sbatch'
    if after is not None:
        if '-' not in after:
            sbatch += ' --dependency=afterok:' + after
        else:
            amin, amax = map(int, after.split('-'))
            sbatch += ' --dependency=afterok:' + ':'.join(map(str, [i for i in get_current_jobs() if amin <= i <= amax]))

    print ' && '.join([sbatch + ' ' + filename for filename in filenames])

if __name__ == '__main__':
    parser = ArghParser()
    parser.set_default_command(process)
    parser.dispatch()

