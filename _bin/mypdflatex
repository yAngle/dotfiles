#!/usr/bin/python2

# this script is called by my version of tex_pdf.vim
# when there is no error, the generated pdf is copied back and exit code is set to zero,
# otherwise, print the error message and set exit code to non-zero as a signal for tex_pdf
# rubber is used for most of the heavy-lifting, except for mpost processor

import os
import sys
import subprocess

def execute(command):
    return subprocess.Popen([command], shell=True, stdout=subprocess.PIPE, 
                            stderr=subprocess.PIPE).communicate()

# find the master file first
filename=sys.argv[1]
with open(filename) as f:
    line=f.readline().rstrip(' \t\r\n')
    if line[0:8]==r'%MASTER=':
        filename=line[8:]

# create work place
execute('mkdir -p .tmpTeX')
execute('cp *.bst .tmpTeX/')

# compile
#s=execute(r"pdflatex -file-line-error -interaction=nonstopmode"+
#          r" -output-directory .tmpTeX "+
#          filename+r" | grep -P ':\d{1,5}: ' ")[0] 
s=execute(r'rubber --into .tmpTeX -dfsq "%s"'%filename)[1] # rubber uses stderr

if len(s)>0:
    print s,
    exit(1)
else:
    # need to compile mp files manually
    mp_files=[name for name in os.listdir('.tmpTeX') if os.path.splitext(name)[1]=='.mp']
    if mp_files:
        os.chdir('.tmpTeX')
        for mp in mp_files:
            s=execute(r'''mpost -file-line-error -interaction=nonstopmode "%s"'''
                      %os.path.splitext(mp)[0]) # apparently mpost does not use stderr
            # pick out lines with feynmf
            # this is NOT the complete message from feynmf
            error=[line for line in s[0].split('\n') 
                    if line.find('feynmf: ')!=-1];
            if error:
                with open(mp) as f:
                    line=f.readline().rstrip(' \t\r\n').split('automatically by ')
                if len(line)>1:
                    os.chdir('..')
                    texname=line[1]
                    with open(texname) as f:
                        for i,line in enumerate(f.readlines()):
                            if line.find('{%s}'%os.path.splitext(mp)[0])!=-1:
                                for l in error:
                                    print '%s:%d:%s'%(texname,i+1,l)
                                exit(1)
                # even if we didn't find anything, things still went wrong
                print s[0]
                exit(1)
        else: # if mpost ran successfully, try to latex again
            os.chdir('..')
            #ss=execute(r"pdflatex -file-line-error -interaction=nonstopmode"+
            #          r" -output-directory .tmpTeX "+
            #          filename+r" | grep -P ':\d{1,5}: ' ")[0] 
            ss=execute(r'rubber --into .tmpTeX -dfsq "%s"'%filename)[1] # rubber uses stderr
            if len(ss)>0: # failed
                print ss,
                exit(1)

    execute('cp .tmpTeX/%s.pdf .'% os.path.basename(filename[:-4]))
    exit(0)
