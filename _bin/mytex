#!/usr/bin/python2

import errno
import os
import os.path as op
import subprocess as sp
import sys


def execute(command, choke=False):
    """execute command in current directory

    choke = whether to choke on non-zero return code
    """
    p = sp.Popen([command], shell=True, stdout=sp.PIPE, stderr=sp.PIPE)
    stdout, stderr = p.communicate()

    if choke and p.returncode != 0:
        if len(stdout) > 0:
            print stdout,
        if len(stderr) > 0:
            print stderr,

        sys.exit(p.returncode)

    return stdout, stderr, p.returncode


def find_master(filename):
    """find the master .tex file"""
    with open(filename) as f:
        line = f.readline().rstrip(' \t\r\n')

    header = r'%MASTER='
    if line.startswith(header):
        return line[len(header):]
    else:
        return filename


def prepare_temp(base, temp):
    """create symlinks in temp folder"""
    execute('mkdir -p "%s"' % temp)

    skip_ext = ('.pdf', '.aux', '.log', '.out')
    for f in os.listdir(base):
        if f != temp and not any(f.endswith(ext) for ext in skip_ext):
            source = op.join(base, f)
            target = op.join(base, temp, f)
            try:
                os.symlink(source, target)
            except OSError, e:
                if e.errno == errno.EEXIST:
                    os.remove(target)
                    os.symlink(source, target)
                else:
                    raise


from argh import arg
@arg('filename', type=str, help='.tex filename')
@arg('--temp', type=str, help='path for temporary file', default='.tmpTeX')
@arg('--latex', action='store_true', help='use latex rather than pdflatex', default=False)
@arg('-x', '--xelatex', action='store_true', help='use xelatex rather than pdflatex', default=False)
def run(filename, temp, latex, xelatex):
    """compile LaTeX without littering"""
    filename = find_master(filename)

    base = op.dirname(op.abspath(filename))
    prepare_temp(base, temp)

    mode = '-m pdftex'
    if latex:
        mode = ''
    if xelatex:
        mode = '-m xelatex'

    command = r'rubber --into .tmpTeX -fsq %s "%s"' % (mode, filename)
    execute(command, choke=True)

    name = op.basename(op.splitext(filename)[0])
    final = op.join(base, name + '.pdf')

    if latex:
        dvi = op.join(temp, name + '.dvi')
        execute('dvipdf "%s" "%s"' % (dvi, final), choke=True)
    else:
        pdf = op.join(temp, name + '.pdf')
        execute('cp "%s" "%s"' % (pdf, final), choke=True)


if __name__ == '__main__':
    from argh.helpers import ArghParser
    parser = ArghParser()
    parser.set_default_command(run)
    parser.dispatch()
