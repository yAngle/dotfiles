#!/usr/bin/python2

import click
import errno
import os
import os.path as op
import subprocess as sp
import sys


def execute(command, choke=False):
    """execute command in current directory

    choke = whether to choke on non-zero return code
    """
    p = sp.Popen([command], shell=True, stdout=sp.PIPE, stderr=sp.PIPE)
    stdout, stderr = p.communicate()

    if choke and p.returncode != 0:
        if len(stdout) > 0:
            print stdout,
        if len(stderr) > 0:
            print stderr,

        sys.exit(p.returncode)

    return stdout, stderr, p.returncode


def find_master(filename):
    """find the master .tex file"""
    with open(filename) as f:
        line = f.readline().rstrip(' \t\r\n')

    header = r'%MASTER='
    if line.startswith(header):
        return line[len(header):]
    else:
        return filename


def prepare_temp(base, temp):
    """create symlinks in temp folder"""
    execute('mkdir -p "%s"' % temp)

    skip_ext = ('.pdf', '.aux', '.log', '.out')
    for f in os.listdir(base):
        if f != temp and not any(f.endswith(ext) for ext in skip_ext):
            source = op.join(base, f)
            target = op.join(base, temp, f)
            try:
                os.symlink(source, target)
            except OSError, e:
                if e.errno == errno.EEXIST:
                    os.remove(target)
                    os.symlink(source, target)
                else:
                    raise


@click.command(context_settings=dict(help_option_names=['-h', '--help']))
@click.argument('filename', metavar='<paper.tex>',
                type=click.Path(exists=True, file_okay=True, dir_okay=False))
@click.option('--temp', metavar='<path>', default='.tmpTeX',
              type=click.Path(resolve_path=True),
              help='Path for temporary files', show_default=True)
@click.option('--latex', is_flag=True,
              help='Use latex rather than pdflatex')
@click.option('-x', '--xelatex', is_flag=True,
              help='Use xelatex rather than pdflatex')
@click.option('-u', '--unsafe', is_flag=True,
              help="Call rubber with '--unsafe' flag")
def run(filename, temp, latex, xelatex, unsafe):
    """Compile LaTeX without littering."""
    filename = find_master(filename)

    base = op.dirname(op.abspath(filename))
    prepare_temp(base, temp)

    mode = '-m pdftex'
    if latex:
        mode = ''
    if xelatex:
        mode = '-m xelatex'

    if unsafe:
        mode += ' --unsafe'

    command = r'rubber --into %s -fsq %s "%s"' % (temp, mode, filename)
    execute(command, choke=True)

    name = op.basename(op.splitext(filename)[0])
    final = op.join(base, name + '.pdf')

    if latex:
        dvi = op.join(temp, name + '.dvi')
        execute('dvipdf "%s" "%s"' % (dvi, final), choke=True)
    else:
        pdf = op.join(temp, name + '.pdf')
        execute('cp "%s" "%s"' % (pdf, final), choke=True)


if __name__ == '__main__':
    run()
