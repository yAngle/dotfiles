#!/bin/bash

# Created by argbash-init v2.7.0
# ARG_OPTIONAL_SINGLE([browser],[b],[Browser command],["firefox"])
# ARG_OPTIONAL_BOOLEAN([html],[],[Whether to render html and refresh browser],[on])
# ARG_OPTIONAL_BOOLEAN([pdf],[p],[Whether to render pdf],[off])
# ARG_POSITIONAL_SINGLE([input],[Input markdown filename],[""])
# ARG_DEFAULTS_POS()
# ARGBASH_SET_INDENT([    ])
# ARG_HELP([Automatically recompile markdown on file change])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.7.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
    local _ret=$2
    test -n "$_ret" || _ret=1
    test "$_PRINT_HELP" = yes && print_help >&2
    echo "$1" >&2
    exit ${_ret}
}


begins_with_short_option()
{
    local first_option all_short_options='bph'
    first_option="${1:0:1}"
    test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_input=""
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_browser="firefox"
_arg_html="on"
_arg_pdf="off"


print_help()
{
    printf '%s\n' "Automatically recompile markdown on file change"
    printf 'Usage: %s [-b|--browser <arg>] [--(no-)html] [-p|--(no-)pdf] [-h|--help] [<input>]\n' "$0"
    printf '\t%s\n' "<input>: Input markdown filename (default: '""')"
    printf '\t%s\n' "-b, --browser: Browser command (default: '"firefox"')"
    printf '\t%s\n' "--html, --no-html: Whether to render html and refresh browser (on by default)"
    printf '\t%s\n' "-p, --pdf, --no-pdf: Whether to render pdf (off by default)"
    printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
    _positionals_count=0
    while test $# -gt 0
    do
        _key="$1"
        case "$_key" in
            -b|--browser)
                test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
                _arg_browser="$2"
                shift
                ;;
            --browser=*)
                _arg_browser="${_key##--browser=}"
                ;;
            -b*)
                _arg_browser="${_key##-b}"
                ;;
            --no-html|--html)
                _arg_html="on"
                test "${1:0:5}" = "--no-" && _arg_html="off"
                ;;
            -p|--no-pdf|--pdf)
                _arg_pdf="on"
                test "${1:0:5}" = "--no-" && _arg_pdf="off"
                ;;
            -p*)
                _arg_pdf="on"
                _next="${_key##-p}"
                if test -n "$_next" -a "$_next" != "$_key"
                then
                    begins_with_short_option "$_next" && shift && set -- "-p" "-${_next}" "$@" || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
                fi
                ;;
            -h|--help)
                print_help
                exit 0
                ;;
            -h*)
                print_help
                exit 0
                ;;
            *)
                _last_positional="$1"
                _positionals+=("$_last_positional")
                _positionals_count=$((_positionals_count + 1))
                ;;
        esac
        shift
    done
}


handle_passed_args_count()
{
    test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect between 0 and 1, but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
    local _positional_name _shift_for=$1
    _positional_names="_arg_input "

    shift "$_shift_for"
    for _positional_name in ${_positional_names}
    do
        test $# -gt 0 || break
        eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
        shift
    done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


root=$(dirname $(realpath "${BASH_SOURCE[0]}"))
mdh="$root/mdh"
mdp="$root/mdp"

input="$_arg_input"
if [[ ! -e "$input" ]]; then
    # Find most recently modified markdown file in cwd
    unset -v input
    for file in *.md *.mkd *.markdown; do
        [[ "$file" -nt "$input" ]] && input=$file
    done
fi

if [[ -z "$input" ]]; then
    echo "Can't find a markdown input!"
    exit 1
fi

html=${input%.*}.html
pdf=${input%.*}.pdf
shown=false

echo "Watching $input"
while true; do
    if [[ "$_arg_html" == "on" ]]; then
        $mdh "$input" "$html"
        echo "Rendered $html"

        if [[ $shown == false ]]; then
            "$_arg_browser" "$html" &>/dev/null &
            shown=true
        else
            active_window=$(xdotool getactivewindow)
            # Assume only a single browser window exists in the current desktop
            # (workspace), and its class name is simply $_arg_browser.
            xdotool search --onlyvisible --all \
                --desktop `xdotool get_desktop` \
                --class "$_arg_browser" windowfocus key 'F5'
            xdotool windowfocus $active_window
        fi
    fi

    if [[ "$_arg_pdf" == "on" ]]; then
        $mdp "$input" "$pdf"
        echo "Rendered $pdf"
    fi

    inotifywait -qq -e CLOSE_WRITE "$input"
done

# ] <-- needed because of Argbash
