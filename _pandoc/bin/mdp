#!/bin/bash

# Created by argbash-init v2.7.0
# ARG_OPTIONAL_SINGLE([output],[o],[Output filename],[""])
# ARG_OPTIONAL_BOOLEAN([pygments],[],[Whether to use Pygments for syntax highlighting],[on])
# ARG_POSITIONAL_SINGLE([input],[Input markdown filename],[""])
# ARG_DEFAULTS_POS()
# ARGBASH_SET_INDENT([    ])
# ARG_HELP([Render a markdown file to pdf (or LaTeX) using pandoc])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.7.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
    local _ret=$2
    test -n "$_ret" || _ret=1
    test "$_PRINT_HELP" = yes && print_help >&2
    echo "$1" >&2
    exit ${_ret}
}


begins_with_short_option()
{
    local first_option all_short_options='oh'
    first_option="${1:0:1}"
    test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_input=""
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_output=""
_arg_pygments="on"


print_help()
{
    printf '%s\n' "Render a markdown file to pdf (or LaTeX) using pandoc"
    printf 'Usage: %s [-o|--output <arg>] [--(no-)pygments] [-h|--help] [<input>]\n' "$0"
    printf '\t%s\n' "<input>: Input markdown filename (default: '""')"
    printf '\t%s\n' "-o, --output: Output filename (default: '""')"
    printf '\t%s\n' "--pygments, --no-pygments: Whether to use Pygments for syntax highlighting (on by default)"
    printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
    _positionals_count=0
    while test $# -gt 0
    do
        _key="$1"
        case "$_key" in
            -o|--output)
                test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
                _arg_output="$2"
                shift
                ;;
            --output=*)
                _arg_output="${_key##--output=}"
                ;;
            -o*)
                _arg_output="${_key##-o}"
                ;;
            --no-pygments|--pygments)
                _arg_pygments="on"
                test "${1:0:5}" = "--no-" && _arg_pygments="off"
                ;;
            -h|--help)
                print_help
                exit 0
                ;;
            -h*)
                print_help
                exit 0
                ;;
            *)
                _last_positional="$1"
                _positionals+=("$_last_positional")
                _positionals_count=$((_positionals_count + 1))
                ;;
        esac
        shift
    done
}


handle_passed_args_count()
{
    test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect between 0 and 1, but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
    local _positional_name _shift_for=$1
    _positional_names="_arg_input "

    shift "$_shift_for"
    for _positional_name in ${_positional_names}
    do
        test $# -gt 0 || break
        eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
        shift
    done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


if [[ ! -e "$_arg_input" ]]; then
    echo "Input file '$_arg_input' does not exist!"
    exit 1
fi

if [[ -z "$_arg_output" ]]; then
    _arg_output="${_arg_input%.*}".pdf
fi

cmd=(pandoc --from markdown --to latex \
    --template report \
    "$_arg_input" -o "$_arg_output")

if [[ "$_arg_pygments" == "on" ]]; then
    cmd+=(--filter "$HOME/.pandoc/filters/pygments" \
        -H "$HOME/.pandoc/templates/latex/pygments_style.tex")
fi

"${cmd[@]}"

# ] <-- needed because of Argbash
